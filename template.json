{
  "Description" : "GorillaStack CloudFormation Sample Template VPC_With_RDS_Aurora_And_Lambda: Sample template showing how to create a private subnet in a VPC with an RDS instance and configure a lambda function to access this instance.",
  "Parameters" : {
    "VPCCIDR" : {
      "Type" : "String",
      "Description" : "IP Address range for the VPC",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.12.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PrivateSubnetACIDR" : {
      "Type" : "String",
      "Description" : "IP Address range for the VPN connected Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.12.0.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "PrivateSubnetBCIDR" : {
      "Type" : "String",
      "Description" : "IP Address range for the VPN connected Subnet",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "10.12.1.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "AvailabilityZoneA" : {
      "Type" : "String",
      "Description" : "First AvailabilityZone",
      "Default": "ap-northeast-1a"
    },

    "AvailabilityZoneB" : {
      "Type" : "String",
      "Description" : "Second AvailabilityZone",
      "Default": "ap-northeast-1c"
    },

    "CodeS3Bucket" : {
      "Type" : "String",
      "Description" : "S3 bucket in which the code is located",
      "Default": "gorillastack-public"
    },

    "CodeZipFileName" : {
      "Type" : "String",
      "Description" : "String of path to the code zip file in the s3 bucket",
      "Default": "lambda_fn_example.zip"
    },

    "DatabaseName" : {
      "Type" : "String",
      "Description" : "Name of up to 8 characters to identify your database",
      "AllowedPattern": "\\w{1,8}",
      "Default": "exDB"
    },

    "DBMasterUsername" : {
      "Type" : "String",
      "Description" : "Master username for the DB cluster",
      "Default": "example"
    },

    "DBMasterUserPassword" : {
      "Type" : "String",
      "Description" : "Master user's password for the DB cluster",
      "Default": "password"
    },

    "DBInstanceClass" : {
      "Type": "String",
      "Description": "Database instance type",
      "Default": "db.r3.large"
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Ref" : "VPCCIDR" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Network", "Value" : "VPN Connected VPC" }
        ]
      }
    },

    "PrivateSubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Ref" : "AvailabilityZoneA" },
        "CidrBlock" : { "Ref" : "PrivateSubnetACIDR" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Subnet Type", "Value" : "Private" }
        ]
      }
    },


    "PrivateSubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PrivateSubnetBCIDR" },
        "AvailabilityZone" : { "Ref" : "AvailabilityZoneB" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
          { "Key" : "Subnet Type", "Value" : "Private" }
        ]
      }
    },

    "VPCSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for our private VPC",
        "SecurityGroupEgress" : [],
        "SecurityGroupIngress" : [{
          "CidrIp" : { "Ref" : "VPCCIDR" },
          "FromPort" : 3306,
          "IpProtocol" : "TCP",
          "ToPort" : 3306
        }],
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "DBSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "AuroraPrivateSubnetGroup",
        "SubnetIds" : [ { "Ref" : "PrivateSubnetA" }, { "Ref" : "PrivateSubnetB" } ]
      }
    },

    "AuroraCluster": {
      "Type" : "AWS::RDS::DBCluster",
      "Properties" : {
        "DBSubnetGroupName" : { "Ref": "DBSubnetGroup" },
        "DatabaseName" : { "Ref" : "DatabaseName" },
        "Engine" : "aurora",
        "MasterUsername" : { "Ref" : "DBMasterUsername" },
        "MasterUserPassword" : { "Ref" : "DBMasterUserPassword" },
        "VpcSecurityGroupIds" : [ { "Ref" : "VPCSecurityGroup" } ]
      }
    },

    "AuroraNode1": {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBClusterIdentifier" : { "Ref": "AuroraCluster" },
        "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
        "Engine" : "aurora",
        "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
        "AvailabilityZone" : { "Fn::GetAtt" : [ "PrivateSubnetA", "AvailabilityZone" ] },
        "PubliclyAccessible" : false
      }
    },

    "AuroraNode2": {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBClusterIdentifier" : { "Ref": "AuroraCluster" },
        "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
        "Engine" : "aurora",
        "DBInstanceClass" : { "Ref" : "DBInstanceClass" },
        "AvailabilityZone" : { "Fn::GetAtt" : [ "PrivateSubnetB", "AvailabilityZone" ] },
        "PubliclyAccessible" : false
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LambdaExecutionRolePolicy",
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },

  "Outputs" : {
    "VPCId" : {
      "Description" : "VPCId of the newly created VPC",
      "Value" :  { "Ref" : "VPC" }
    },
    "PrivateSubnetA" : {
      "Description" : "SubnetId of the private subnet",
      "Value" :  { "Ref" : "PrivateSubnetA" }
    },
    "PrivateSubnetB" : {
      "Description" : "SubnetId of the private subnet",
      "Value" :  { "Ref" : "PrivateSubnetB" }
    },
    "AuroraEndpoint" : {
      "Description" : "The connection endpoint for the DB cluster",
      "Value" :  { "Fn::GetAtt" : [ "AuroraCluster", "Endpoint.Address" ] }
    },
    "AuroraPort" : {
      "Description" : "The connection port for the DB cluster",
      "Value" :  { "Fn::GetAtt" : [ "AuroraCluster", "Endpoint.Port" ] }
    },
    "AuroraNode1" : {
      "Description" : "AuroraNode1",
      "Value" :  { "Ref" : "AuroraNode1" }
    },
    "AuroraNode2" : {
      "Description" : "AuroraNode2",
      "Value" :  { "Ref" : "AuroraNode2" }
    }
  }
}
